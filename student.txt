

import java.io.*;
import java.util.*;

public class StudentManagementSystem {
    private static final String FILE_NAME = "students.txt";
    private static Map<String, Student> students = new HashMap<>();

    public static void main(String[] args) {
        loadStudents();

        Scanner scanner = new Scanner(System.in);
        boolean running = true;

        while (running) {
            System.out.println("Select operation:");
            System.out.println("1: Add Student");
            System.out.println("2: Delete Student");
            System.out.println("3: Update Student");
            System.out.println("4: Display Students");
            System.out.println("5: Calculate GPA");
            System.out.println("6: Generate Report");
            System.out.println("0: Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addStudent(scanner);
                    break;
                case 2:
                    deleteStudent(scanner);
                    break;
                case 3:
                    updateStudent(scanner);
                    break;
                case 4:
                    displayStudents();
                    break;
                case 5:
                    calculateGPA(scanner);
                    break;
                case 6:
                    generateReport(scanner);
                    break;
                case 0:
                    running = false;
                    break;
                default:
                    System.out.println("Invalid choice. Please select a valid operation.");
            }
        }

        saveStudents();
        scanner.close();
    }

    private static void loadStudents() {
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                Student student = new Student(parts[0], parts[1]);
                for (int i = 2; i < parts.length; i += 2) {
                    student.addCourse(parts[i], Double.parseDouble(parts[i + 1]));
                }
                students.put(student.getId(), student);
            }
        } catch (IOException e) {
            System.out.println("Error loading students: " + e.getMessage());
        }
    }

    private static void saveStudents() {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Student student : students.values()) {
                writer.write(student.toString());
                for (Map.Entry<String, Double> entry : student.getCourses().entrySet()) {
                    writer.write("," + entry.getKey() + "," + entry.getValue());
                }
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Error saving students: " + e.getMessage());
        }
    }

    private static void addStudent(Scanner scanner) {
        System.out.println("Enter student ID:");
        String id = scanner.nextLine();
        System.out.println("Enter student name:");
        String name = scanner.nextLine();
        Student student = new Student(id, name);
        students.put(id, student);
        System.out.println("Student added.");
    }

    private static void deleteStudent(Scanner scanner) {
        System.out.println("Enter student ID to delete:");
        String id = scanner.nextLine();
        if (students.remove(id) != null) {
            System.out.println("Student deleted.");
        } else {
            System.out.println("Student not found.");
        }
    }

    private static void updateStudent(Scanner scanner) {
        System.out.println("Enter student ID to update:");
        String id = scanner.nextLine();
        Student student = students.get(id);
        if (student == null) {
            System.out.println("Student not found.");
            return;
        }
        System.out.println("1: Add Course");
        System.out.println("2: Remove Course");
        int choice = scanner.nextInt();
        scanner.nextLine(); // Consume newline
        switch (choice) {
            case 1:
                System.out.println("Enter course name:");
                String course = scanner.nextLine();
                System.out.println("Enter grade:");
                double grade = scanner.nextDouble();
                student.addCourse(course, grade);
                System.out.println("Course added.");
                break;
            case 2:
                System.out.println("Enter course name to remove:");
                course = scanner.nextLine();
                student.removeCourse(course);
                System.out.println("Course removed.");
                break;
            default:
                System.out.println("Invalid choice.");
        }
    }

    private static void displayStudents() {
        for (Student student : students.values()) {
            System.out.println("ID: " + student.getId() + ", Name: " + student.getName());
            for (Map.Entry<String, Double> entry : student.getCourses().entrySet()) {
                System.out.println("    Course: " + entry.getKey() + ", Grade: " + entry.getValue());
            }
        }
    }

    private static void calculateGPA(Scanner scanner) {
        System.out.println("Enter student ID to calculate GPA:");
        String id = scanner.nextLine();
        Student student = students.get(id);
        if (student == null) {
            System.out.println("Student not found.");
        } else {
            double gpa = student.calculateGPA();
            System.out.println("GPA: " + gpa);
        }
    }

    private static void generateReport(Scanner scanner) {
        System.out.println("Enter student ID to generate report:");
        String id = scanner.nextLine();
        Student student = students.get(id);
        if (student == null) {
            System.out.println("Student not found.");
        } else {
            System.out.println("ID: " + student.getId());
            System.out.println("Name: " + student.getName());
            for (Map.Entry<String, Double> entry : student.getCourses().entrySet()) {
                System.out.println("Course: " + entry.getKey() + ", Grade: " + entry.getValue());
            }
            System.out.println("GPA: " + student.calculateGPA());
        }
    }
}